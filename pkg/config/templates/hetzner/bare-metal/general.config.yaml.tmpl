forkURLs:
  # KubeAid repository URL (in HTTPs syntax).
  # Defaults to Obmondo's KubeAid repository.
  kubeaid: https://github.com/Obmondo/KubeAid

  # Your KubeAid config repository URL (in HTTPs syntax).
  kubeaidConfig: https://github.com/xxxxxxxxxx/kubeaid-config

cluster:

  # Kubernetes cluster name.
  name: kubeaid-demo

  # Kubernetes version to use.
  #
  # We're using Kubermatic KubeOne v1.10 under the hood, to initialize the Kubernete cluster.
  # And the supported Kubernetes versions are specified here :
  # https://docs.kubermatic.com/kubeone/v1.10/architecture/compatibility/supported-versions/.
  k8sVersion: v1.31.0

  # Kubeaid version to use.
  #
  # By default, the latest KubeAid version is used.
  # You an view all the KubeAid versions here : https://github.com/Obmondo/kubeaid/releases.
  kubeaidVersion: 13.0.0

  # Kubernetes API server specific configurations.
  # REFER : https://github.com/kubernetes-sigs/cluster-api/blob/main/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanes.yaml.
  #
  # NOTE : Generally, refer to the KubeadmControlPlane CRD instead of the corresponding GoLang
  #        source types linked below.
  #        There are some configuration options which appear in the corresponding GoLang source type,
  #        but not in the CRD. If you set those fields, then they get removed by the Kubeadm
  #        control-plane provider. This causes the capi-cluster ArgoCD App to always be in an
  #        OutOfSync state, resulting to the KubeAid Bootstrap Script not making any progress!
  # apiServer:
  #
  #   extraArgs: {}
  #
  #   # REFER : "sigs.k8s.io/cluster-api/bootstrap/kubeadm/api/v1beta1".HostPathMount
  #   #
  #   # NOTE : If you want a mount to be read-only, then set extraVolume.readOnly to true.
  #   #        Otherwise, omit setting that field. It gets removed by the Kubeadm control-plane
  #   #        provider component, which results to the capi-cluster ArgoCD App always being in
  #   #        OutOfSync state.
  #   extraVolumes: []
  #
  #   # REFER : "sigs.k8s.io/cluster-api/bootstrap/kubeadm/api/v1beta1".File
  #   files: []

  # Uncomment, if you just want audit-logging to work out of the box! KubeAid Bootstrap Script will
  # set necessary configuration options in cluster.apiServer.
  # enableAuditLogging: True

  # Any additional users you want to be setup for each Kubernetes node.
  # additionalUsers:
  #  - name: <username>
  #    sshPublicKey: xxxxxxxxxx

cloud:
  hetzner:
    mode: bare-metal

    bareMetal:
      # If true, then before provisioning each machine, ClusterAPI Provider Hetzner (CAPH) will
      # wipe the disks.
      wipeDisks: False

      # Details about the Hetzner Bare Metal SSH KeyPair, that you created to meet the
      # prerequisites.
      # This SSH key-pair will be used to SSH into the Hetzner Bare Metal servers (in both normal
      # or rescue mode).
      sshKeyPair:
        name: cluster
        publicKeyFilePath: ./outputs/ssh/rsa/openssh/.pub
        privateKeyFilePath: ./outputs/ssh/rsa/openssh/.key

    controlPlane:
      # Regions you're using in the eu-central Hetzner network zone.
      #
      # NOTE : We only support the eu-central Hetzner network zone for now.
      regions:
        - fsn1
        - nbg1
        - hel1

      bareMetal:
        # Kubernetes API server endpoint.
        endpoint:
          # Endpoint host.
          #
          # If you have only 1 contol-plane node, this can be the IP of that control-plane node.
          #
          # Otherwise, to have multiple control-plane nodes, you need to use a Hetzner Bare Metal
          # Failover IP.
          host: xxxxxxxxxx

          # Whether you're using a Hetzner Bare-Metal Failover IP or not.
          isFailoverIP: true

        bareMetalHosts:
          - serverID: xxxxxxxxxx
            wwn:
              - "xxxxxxxxxx"
              - "xxxxxxxxxx"

    nodeGroups:
      bareMetal:
        - name: bootstrapper

          bareMetalHosts:
            - serverID: xxxxxxxxxx
              wwn:
                - "xxxxxxxxxx"
                - "xxxxxxxxxx"
            - serverID: xxxxxxxxxx
              wwn:
                - "xxxxxxxxxx"
                - "xxxxxxxxxx"

          # A label should meet one of the following criterias to propagate to each of the nodes :
          #
          # (1) Has node-role.kubernetes.io as prefix.
          # (2) Belongs to node-restriction.kubernetes.io domain.
          # (3) Belongs to node.cluster.x-k8s.io domain.
          #
          # REFER : https://cluster-api.sigs.k8s.io/developer/architecture/controllers/metadata-propagation#machine
          labels:
            node-role.kubernetes.io/bootstrapper: ""
            node.cluster.x-k8s.io/nodegroup: bootstrapper

          # taints: []

