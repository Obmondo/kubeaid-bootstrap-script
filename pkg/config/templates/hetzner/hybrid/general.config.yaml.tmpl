forkURLs:
  # KubeAid repository URL (in HTTPs syntax).
  # Defaults to Obmondo's KubeAid repository.
  kubeaid: https://github.com/Obmondo/KubeAid

  # Your KubeAid config repository URL (in HTTPs syntax).
  kubeaidConfig: https://github.com/xxxxxxxxxx/kubeaid-config

# Kubernetes cluster and control-plane specific configurations.
cluster:
  # Kubernetes cluster name.
  name: kubeaid-demo-hetzner-hybrid

  # Kubernetes version to use.
  k8sVersion: v1.31.0

  # Kubeaid version to use.
  kubeaidVersion: {{ .KubeAidVersion }}

  # Kubernetes API server specific configurations.
  # REFER : https://github.com/kubernetes-sigs/cluster-api/blob/main/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanes.yaml.
  #
  # NOTE : Generally, refer to the KubeadmControlPlane CRD instead of the corresponding GoLang
  #        source types linked below.
  #        There are some configuration options which appear in the corresponding GoLang source type,
  #        but not in the CRD. If you set those fields, then they get removed by the Kubeadm
  #        control-plane provider. This causes the capi-cluster ArgoCD App to always be in an
  #        OutOfSync state, resulting to the KubeAid Bootstrap Script not making any progress!
  # apiServer:
  #
  #   extraArgs: {}
  #
  #   # REFER : "sigs.k8s.io/cluster-api/bootstrap/kubeadm/api/v1beta1".HostPathMount
  #   #
  #   # NOTE : If you want a mount to be read-only, then set extraVolume.readOnly to true.
  #   #        Otherwise, omit setting that field. It gets removed by the Kubeadm control-plane
  #   #        provider component, which results to the capi-cluster ArgoCD App always being in
  #   #        OutOfSync state.
  #   extraVolumes: []
  #
  #   # REFER : "sigs.k8s.io/cluster-api/bootstrap/kubeadm/api/v1beta1".File
  #   files: []

  # Uncomment, if you just want audit-logging to work out of the box! KubeAid Bootstrap Script will
  # set necessary configuration options in cluster.apiServer.
  # enableAuditLogging: True

  # Any additional users you want to be setup for each Kubernetes node.
  # additionalUsers:
  #  - name: <username>
  #    sshPublicKey: xxxxxxxxxx

cloud:
  hetzner:
    mode: bare-metal

    # You can view all valid Hetzner zones and regions here :
    # https://docs.hetzner.com/cloud/general/locations/.
    zone: eu-central

    hcloudSSHKeyPairName: cluster

    rescueHCloudSSHKeyPair:
      name: cluster
      publicKeyFilePath: ./outputs/ssh/rsa/openssh/.pub
      privateKeyFilePath: ./outputs/ssh/rsa/openssh/.key

    # If true, creates a Hetzner private network and spins up the HCloud servers there.
    # The servers can then communicate to each other directly, using private IPs.
    networkEnabled: true

    imageName: ubuntu-24.04

    controlPlane:
      # HCloud machine type to be used for control-plane nodes.
      machineType: cax11

      # Number of control-plane nodes you want.
      replicas: 3

      # Servers will be spread across these HCloud regions.
      regions:
        - fsn1
        - nbg1
        - hel1

      loadBalancer:
        # Whether you want a loadbalancer which loadbalances traffic across the control-plane
        # node(s).
        # If you want a single control-plane node, you can disable this.
        enabled: true

        # HCloud region where the loadbalancer will be created.
        region: hel1

    nodeGroups:
      bareMetal:
        - name: bootstrapper
          bareMetalHosts:
            - serverID: xxxxxxxxxx
              wwn:
                - "xxxxxxxxxx"
                - "xxxxxxxxxx"
            - serverID: xxxxxxxxxx
              wwn:
                - "xxxxxxxxxx"
                - "xxxxxxxxxx"
          labels:
            node-role.kubernetes.io/bootstrapper: ""
            node.cluster.x-k8s.io/nodegroup: bootstrapper
          taints: []
