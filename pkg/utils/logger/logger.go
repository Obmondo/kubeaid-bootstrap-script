package logger

import (
	"io"
	"log"
	"log/slog"
	"os"

	"github.com/Obmondo/kubeaid-bootstrap-script/pkg/constants"
	"github.com/go-logr/logr"
	controllerRuntimeLogger "sigs.k8s.io/controller-runtime/pkg/log"
)

// Initializes the logger.
func InitLogger(isDebugModeEnabled bool) {
	logLevel := slog.LevelInfo
	if isDebugModeEnabled {
		logLevel = slog.LevelDebug
	}

	logFile, err := os.OpenFile(constants.OutputPathLogFile, os.O_CREATE|os.O_WRONLY|os.O_TRUNC, 0644)
	if err != nil {
		log.Fatal("Failed opening log file")
	}

	logger := slog.New(withContextualSlogAttributesHandler(NewCustomTextHandler(
		io.MultiWriter(logFile, os.Stdout), &slog.HandlerOptions{
			Level: logLevel,
		},
	)))
	slog.SetDefault(logger)

	// Initialize controller-runtime's (or kubebuilder's) base logger. Otherwise, it'll complain with
	// some error message.
	// We want to ignore all logs generated by the controller runtime.
	controllerRuntimeLogger.SetLogger(logr.Discard())
}

func Error(err error) slog.Attr {
	return slog.Any("error", err)
}
